import os
import json
from PyQt6.QtWidgets import (
    QDialog, QVBoxLayout, QTextEdit, QPushButton,
    QListWidget, QListWidgetItem, QHBoxLayout,
    QFileDialog, QLabel, QScrollArea, QWidget, QGridLayout, QMessageBox, QLineEdit, QComboBox
)
from PyQt6.QtGui import QPixmap, QIcon
from PyQt6.QtCore import Qt, QDateTime
from PyQt6 import QtCore
import tempfile
import threading
import sounddevice as sd
from scipy.io.wavfile import write
import numpy as np
import emoji


class MessageWindow(QDialog):
    def __init__(self, current_id, current_user, receiver=None):
        super().__init__()
        self.current_id = current_id
        self.current_user = current_user
        self.receiver = receiver
        self.setWindowTitle(f"Nh·∫Øn tin v·ªõi @{self.receiver}" if receiver else "Tin nh·∫Øn")
        self.setGeometry(150, 150, 500, 600)
        self.messages_file = f"data/messages/{self.current_user}_to_{self.receiver}.json"
        self.init_ui()
        self.load_messages()

    def init_ui(self):
        layout = QVBoxLayout()

        self.chat_list = QListWidget()
        layout.addWidget(self.chat_list)

        self.message_input = QTextEdit()
        self.message_input.setPlaceholderText("Nh·∫≠p tin nh·∫Øn, emoji, sticker...")
        self.message_input.setFixedHeight(80)

        send_btn = QPushButton("‚û§")
        send_btn.setToolTip("G·ª≠i tin nh·∫Øn")
        send_btn.clicked.connect(self.send_message)

        emoji_btn = QPushButton("üòä")
        emoji_btn.setToolTip("Ch√®n emoji")
        emoji_btn.clicked.connect(self.insert_emoji)

        sticker_btn = QPushButton("üß©")
        sticker_btn.setToolTip("G·ª≠i sticker")
        sticker_btn.clicked.connect(self.choose_sticker)

        image_btn = QPushButton("üñº")
        image_btn.setToolTip("G·ª≠i ·∫£nh")
        image_btn.clicked.connect(self.send_image)

        video_btn = QPushButton("üé•")
        video_btn.setToolTip("G·ª≠i video")
        video_btn.clicked.connect(self.send_video)

        audio_btn = QPushButton("üé§")
        audio_btn.setToolTip("Ghi √¢m v√† g·ª≠i gi·ªçng n√≥i")
        audio_btn.clicked.connect(self.record_audio)

        btn_layout = QHBoxLayout()
        btn_layout.addWidget(emoji_btn)
        btn_layout.addWidget(sticker_btn)
        btn_layout.addWidget(image_btn)
        btn_layout.addWidget(video_btn)
        btn_layout.addWidget(audio_btn)
        btn_layout.addWidget(send_btn)

        layout.addWidget(self.message_input)
        layout.addLayout(btn_layout)

        self.setLayout(layout)

        self.message_input.textChanged.connect(self.emoji_autoreplace)

    def insert_emoji(self):
        from PyQt6.QtWidgets import QDialog, QVBoxLayout, QLineEdit, QListWidget, QListWidgetItem, QPushButton, QComboBox
        import emoji
        dialog = QDialog(self)
        dialog.setWindowTitle("Ch·ªçn emoji n√¢ng cao")
        dialog.setGeometry(400, 300, 400, 500)
        layout = QVBoxLayout()
        search_input = QLineEdit()
        search_input.setPlaceholderText("T√¨m emoji theo t√™n...")
        layout.addWidget(search_input)
        group_combo = QComboBox()
        group_combo.addItem("T·∫•t c·∫£", None)
        # L·∫•y danh s√°ch emoji v√† nh√≥m
        all_emojis = []
        emoji_groups = {}
        for shortcode in emoji.EMOJI_DATA:
            em = emoji.emojize(shortcode, language='alias')
            group = emoji.EMOJI_DATA[shortcode].get("group", "Other")
            emoji_groups.setdefault(group, []).append((em, shortcode))
            all_emojis.append((em, shortcode, group))
        for group in emoji_groups:
            group_combo.addItem(group, group)
        layout.addWidget(group_combo)
        emoji_list = QListWidget()
        def update_emoji_list():
            text = search_input.text().lower().strip()
            group = group_combo.currentData()
            emoji_list.clear()
            for em, shortcode, g in all_emojis:
                if (not group or g == group) and (text in shortcode.lower() or text in g.lower()):
                    item = QListWidgetItem(f"{em}  {shortcode}")
                    emoji_list.addItem(item)
        search_input.textChanged.connect(update_emoji_list)
        group_combo.currentIndexChanged.connect(update_emoji_list)
        update_emoji_list()
        layout.addWidget(emoji_list)
        def insert_selected():
            selected = emoji_list.selectedItems()
            if selected:
                for item in selected:
                    em = item.text().split()[0]
                    self.message_input.insertPlainText(em)
        emoji_list.itemDoubleClicked.connect(lambda item: (self.message_input.insertPlainText(item.text().split()[0]), dialog.accept()))
        insert_btn = QPushButton("Ch√®n emoji ƒë√£ ch·ªçn")
        insert_btn.clicked.connect(insert_selected)
        layout.addWidget(insert_btn)
        dialog.setLayout(layout)
        dialog.exec()

    def choose_sticker(self):
        dialog = QDialog(self)
        dialog.setWindowTitle("Ch·ªçn sticker")
        dialog.setGeometry(400, 300, 400, 300)
        layout = QVBoxLayout()
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        container = QWidget()
        grid = QGridLayout(container)
        sticker_dir = "data/stickers"
        if not os.path.exists(sticker_dir):
            os.makedirs(sticker_dir)
        stickers = [f for f in os.listdir(sticker_dir) if f.lower().endswith((".png", ".jpg", ".jpeg", ".gif"))]
        if not stickers:
            layout.addWidget(QLabel("Ch∆∞a c√≥ sticker n√†o. H√£y th√™m file v√†o data/stickers!"))
        else:
            for idx, sticker in enumerate(stickers):
                btn = QPushButton()
                btn.setIcon(QIcon(os.path.join(sticker_dir, sticker)))
                btn.setIconSize(QtCore.QSize(64, 64))
                btn.setFixedSize(72, 72)
                btn.setToolTip(sticker)
                btn.clicked.connect(lambda checked, s=sticker: self.choose_sticker_file(dialog, os.path.join(sticker_dir, s)))
                grid.addWidget(btn, idx // 5, idx % 5)
            scroll.setWidget(container)
            layout.addWidget(scroll)
        dialog.setLayout(layout)
        dialog.exec()

    def choose_sticker_file(self, dialog, file_path):
        self.display_message(file_path, msg_type="sticker")
        self.save_message(file_path, msg_type="sticker")
        dialog.accept()

    def send_image(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "Ch·ªçn ·∫£nh", "", "Images (*.png *.jpg *.jpeg)")
        if file_path:
            self.display_message(file_path, msg_type="image")
            self.save_message(file_path, msg_type="image")

    def send_video(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "Ch·ªçn video", "", "Videos (*.mp4 *.avi *.mov)")
        if file_path:
            self.display_message(file_path, msg_type="video")
            self.save_message(file_path, msg_type="video")

    def send_message(self):
        content = self.message_input.toPlainText().strip()
        if content:
            self.display_message(content, msg_type="text")
            self.save_message(content, msg_type="text")
            self.message_input.clear()
            # Chatbot AI tr·∫£ l·ªùi n·∫øu receiver l√† 'gptbot'
            if self.receiver == "gptbot":
                reply = self.get_bot_reply(content)
                self.display_message(reply, msg_type="text", sender="gptbot")
                self.save_message(reply, msg_type="text")

    def get_bot_reply(self, user_message):
        # N·∫øu c√≥ OpenAI API key th√¨ d√πng GPT, n·∫øu kh√¥ng th√¨ hardcode logic
        import os
        api_key = os.environ.get("OPENAI_API_KEY")
        if api_key:
            try:
                from openai import OpenAI
                client = OpenAI(api_key=api_key)
                response = client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[{"role": "user", "content": user_message}]
                )
                content = response.choices[0].message.content
                if content:
                    return content.strip()
                return "[GPT l·ªói]: Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ API."
            except Exception as e:
                return f"[GPT l·ªói]: {e}"
        # Hardcode logic ƒë∆°n gi·∫£n
        msg = user_message.lower()
        if "hello" in msg or "hi" in msg or "ch√†o" in msg:
            return "Xin ch√†o! T√¥i l√† chatbot AI. B·∫°n c·∫ßn h·ªèi g√¨?"
        if "t√™n" in msg:
            return "T√¥i l√† gptbot, tr·ª£ l√Ω AI c·ªßa b·∫°n!"
        if "c·∫£m ∆°n" in msg:
            return "Kh√¥ng c√≥ g√¨, t√¥i lu√¥n s·∫µn s√†ng gi√∫p b·∫°n!"
        if "m·∫•y gi·ªù" in msg or "gi·ªù" in msg:
            from datetime import datetime
            return f"B√¢y gi·ªù l√† {datetime.now().strftime('%H:%M:%S')}"
        if "ai t·∫°o ra b·∫°n" in msg:
            return "T√¥i ƒë∆∞·ª£c t·∫°o b·ªüi OpenAI v√† ƒë∆∞·ª£c t√≠ch h·ª£p v√†o Link Space b·ªüi admin."
        return "T√¥i ch∆∞a hi·ªÉu √Ω b·∫°n l·∫Øm, b·∫°n c√≥ th·ªÉ h·ªèi l·∫°i kh√¥ng?"

    def display_message(self, content, msg_type="text", msg_index=None, sender=None, timestamp=None):
        item = QListWidgetItem()
        is_own = sender == self.current_user if sender else False
        can_recall = False
        if is_own and timestamp:
            from datetime import datetime, timedelta
            try:
                t = datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S")
                if datetime.now() - t <= timedelta(minutes=2):
                    can_recall = True
            except Exception:
                pass
        
        # Load user data to get nickname
        sender_username = sender or self.current_user
        user_data = self.load_user_data(sender_username)
        nickname = user_data.get("nickname", "")
        
        # Format sender display with nickname
        if nickname:
            sender_display = f"{sender_username} ({nickname})"
        else:
            sender_display = sender_username
            
        # L·∫•y reaction n·∫øu c√≥
        reaction = self.get_reaction(msg_index)
        reaction_str = f"  {reaction}" if reaction else ""
        
        if msg_type == "text":
            item.setText(f"{sender_display}: {content}{reaction_str}")
        elif msg_type == "image":
            label = QLabel()
            pixmap = QPixmap(content).scaled(100, 100, Qt.AspectRatioMode.KeepAspectRatio)
            label.setPixmap(pixmap)
            label.setText(f"{sender_display} g·ª≠i: {os.path.basename(content)}{reaction_str}")
            label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            item.setSizeHint(label.sizeHint())
            self.chat_list.addItem(item)
            self.chat_list.setItemWidget(item, label)
            if can_recall:
                self.add_recall_button(msg_index)
            self.add_reaction_button(msg_index)
            return
        elif msg_type == "sticker":
            label = QLabel()
            pixmap = QPixmap(content).scaled(100, 100, Qt.AspectRatioMode.KeepAspectRatio)
            label.setPixmap(pixmap)
            label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            item.setSizeHint(label.sizeHint())
            self.chat_list.addItem(item)
            self.chat_list.setItemWidget(item, label)
            if can_recall:
                self.add_recall_button(msg_index)
            self.add_reaction_button(msg_index)
            return
        elif msg_type == "video":
            item.setText(f"{sender_display} g·ª≠i video: {os.path.basename(content)}{reaction_str}")
        elif msg_type == "audio":
            label = QLabel(f"{sender_display} g·ª≠i ghi √¢m: {os.path.basename(content)}{reaction_str}")
            play_btn = QPushButton("Ph√°t")
            def play_audio():
                import sys, subprocess
                if sys.platform.startswith('win'):
                    os.startfile(content)
                elif sys.platform.startswith('darwin'):
                    subprocess.call(['open', content])
                else:
                    subprocess.call(['xdg-open', content])
            play_btn.clicked.connect(play_audio)
            w = QWidget()
            l = QVBoxLayout(w)
            l.addWidget(label)
            l.addWidget(play_btn)
            item.setSizeHint(w.sizeHint())
            self.chat_list.addItem(item)
            self.chat_list.setItemWidget(item, w)
            if can_recall:
                self.add_recall_button(msg_index)
            self.add_reaction_button(msg_index)
            return
        self.chat_list.addItem(item)
        if can_recall:
            self.add_recall_button(msg_index)
        self.add_reaction_button(msg_index)

    def add_recall_button(self, msg_index):
        btn = QPushButton("Thu h·ªìi")
        btn.setToolTip("X√≥a/thu h·ªìi tin nh·∫Øn n√†y")
        def recall():
            self.recall_message(msg_index)
        btn.clicked.connect(recall)
        item = QListWidgetItem()
        w = QWidget()
        l = QHBoxLayout(w)
        l.addStretch()
        l.addWidget(btn)
        item.setSizeHint(w.sizeHint())
        self.chat_list.addItem(item)
        self.chat_list.setItemWidget(item, w)

    def recall_message(self, msg_index):
        if not os.path.exists(self.messages_file):
            return
        with open(self.messages_file, "r", encoding="utf-8") as f:
            messages = json.load(f)
        if 0 <= msg_index < len(messages):
            messages[msg_index]["content"] = "Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c thu h·ªìi"
            messages[msg_index]["type"] = "text"
        with open(self.messages_file, "w", encoding="utf-8") as f:
            json.dump(messages, f, indent=4, ensure_ascii=False)
        self.chat_list.clear()
        self.load_messages()

    def save_message(self, content, msg_type):
        os.makedirs(os.path.dirname(self.messages_file), exist_ok=True)
        messages = []
        if os.path.exists(self.messages_file):
            with open(self.messages_file, "r", encoding="utf-8") as f:
                messages = json.load(f)
        # Ki·ªÉm tra ch·∫∑n
        if self.receiver:
            path = f"data/users/{self.receiver}.json"
            if os.path.exists(path):
                with open(path, "r", encoding="utf-8") as f:
                    user_data = json.load(f)
                if "blocked" in user_data and self.current_user in user_data["blocked"]:
                    from PyQt6.QtWidgets import QMessageBox
                    QMessageBox.warning(self, "B·ªã ch·∫∑n", f"B·∫°n ƒë√£ b·ªã @{self.receiver} ch·∫∑n. Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn.")
                    return
        timestamp = QDateTime.currentDateTime().toString("yyyy-MM-dd hh:mm:ss")
        messages.append({
            "sender": self.current_user,
            "receiver": self.receiver,
            "type": msg_type,
            "content": content,
            "timestamp": timestamp,
            "seen": False
        })
        with open(self.messages_file, "w", encoding="utf-8") as f:
            json.dump(messages, f, indent=4, ensure_ascii=False)

    def load_messages(self):
        if os.path.exists(self.messages_file):
            with open(self.messages_file, "r", encoding="utf-8") as f:
                messages = json.load(f)
                # ·∫®n tin nh·∫Øn n·∫øu m√¨nh ƒë√£ ch·∫∑n ng∆∞·ªùi g·ª≠i
                path = f"data/users/{self.current_user}.json"
                blocked = []
                if os.path.exists(path):
                    with open(path, "r", encoding="utf-8") as f2:
                        user_data = json.load(f2)
                        blocked = user_data.get("blocked", [])
                # ƒê√°nh d·∫•u ƒë√£ xem n·∫øu l√† ng∆∞·ªùi nh·∫≠n
                updated = False
                for msg in messages:
                    if msg["receiver"] == self.current_user and not msg.get("seen", False):
                        msg["seen"] = True
                        updated = True
                if updated:
                    with open(self.messages_file, "w", encoding="utf-8") as fw:
                        json.dump(messages, fw, indent=4, ensure_ascii=False)
                self._last_seen_index = -1
                for i, msg in enumerate(messages):
                    if msg.get("seen") and msg["receiver"] == self.current_user:
                        self._last_seen_index = i
                for i, msg in enumerate(messages):
                    if msg["sender"] in blocked:
                        continue
                    self.display_message(msg["content"], msg_type=msg["type"], msg_index=i, sender=msg["sender"], timestamp=msg["timestamp"])
                    # Hi·ªÉn th·ªã "ƒê√£ xem" cho tin nh·∫Øn cu·ªëi c√πng ƒë√£ xem
                    if i == self._last_seen_index:
                        item = QListWidgetItem("ƒê√£ xem")
                        item.setTextAlignment(Qt.AlignmentFlag.AlignRight)
                        self.chat_list.addItem(item)

    def record_audio(self):
        duration, fs = 10, 44100
        msg = QMessageBox(self)
        msg.setWindowTitle("Ghi √¢m")
        msg.setText("ƒêang ghi √¢m... Nh·∫•n OK ƒë·ªÉ d·ª´ng v√† g·ª≠i.")
        msg.setStandardButtons(QMessageBox.StandardButton.Ok)
        audio_data = []
        def callback(indata, frames, time, status):
            audio_data.append(indata.copy())
        stream = sd.InputStream(samplerate=fs, channels=1, callback=callback)
        stream.start()
        msg.exec()
        stream.stop()
        stream.close()
        audio_np = np.concatenate(audio_data, axis=0)
        tmpfile = tempfile.NamedTemporaryFile(delete=False, suffix='.wav')
        write(tmpfile.name, fs, audio_np)
        self.display_message(tmpfile.name, msg_type="audio")
        self.save_message(tmpfile.name, msg_type="audio")

    @staticmethod
    def create_group_dialog(current_user):
        dialog = QDialog()
        dialog.setWindowTitle("T·∫°o nh√≥m chat m·ªõi")
        layout = QVBoxLayout()
        layout.addWidget(QLabel("T√™n nh√≥m:"))
        name_input = QLineEdit()
        layout.addWidget(name_input)
        layout.addWidget(QLabel("Ch·ªçn th√†nh vi√™n:"))
        user_list = QListWidget()
        # Load user list
        with open("data/users.json", "r", encoding="utf-8") as f:
            users = [u["username"] for u in json.load(f) if u["username"] != current_user]
        for u in users:
            user_list.addItem(u)
        user_list.setSelectionMode(QListWidget.SelectionMode.MultiSelection)
        layout.addWidget(user_list)
        btn = QPushButton("T·∫°o nh√≥m")
        def create_group():
            name = name_input.text().strip()
            members = [current_user] + [item.text() for item in user_list.selectedItems()]
            if not name or len(members) < 2:
                QMessageBox.warning(dialog, "L·ªói", "Nh√≥m ph·∫£i c√≥ t√™n v√† √≠t nh·∫•t 2 th√†nh vi√™n!")
                return
            import uuid
            group_id = str(uuid.uuid4())[:8]
            group = {"id": group_id, "name": name, "members": members}
            groups = []
            if os.path.exists("data/groups.json"):
                with open("data/groups.json", "r", encoding="utf-8") as f:
                    groups = json.load(f)
            groups.append(group)
            with open("data/groups.json", "w", encoding="utf-8") as f:
                json.dump(groups, f, indent=4, ensure_ascii=False)
            QMessageBox.information(dialog, "Th√†nh c√¥ng", f"ƒê√£ t·∫°o nh√≥m '{name}'!")
            dialog.accept()
        btn.clicked.connect(create_group)
        layout.addWidget(btn)
        dialog.setLayout(layout)
        dialog.exec()

    @staticmethod
    def open_group_list(current_user):
        dialog = QDialog()
        dialog.setWindowTitle("Danh s√°ch nh√≥m chat")
        layout = QVBoxLayout()
        group_list = QListWidget()
        groups = []
        if os.path.exists("data/groups.json"):
            with open("data/groups.json", "r", encoding="utf-8") as f:
                groups = json.load(f)
        for g in groups:
            if current_user in g["members"]:
                group_list.addItem(f"{g['name']} ({g['id']})")
        layout.addWidget(group_list)
        def open_group():
            sel = group_list.currentItem()
            if sel:
                group_id = sel.text().split("(")[-1].replace(")", "").strip()
                win = GroupChatWindow(group_id, current_user)
                win.exec()
        open_btn = QPushButton("M·ªü nh√≥m")
        open_btn.clicked.connect(open_group)
        layout.addWidget(open_btn)
        dialog.setLayout(layout)
        dialog.exec()

    def emoji_autoreplace(self):
        # T·ª± ƒë·ªông thay :smile: th√†nh emoji khi g√µ
        import re
        text = self.message_input.toPlainText()
        def repl(m):
            code = m.group(1)
            return emoji.emojize(f':{code}:', language='alias')
        new_text = re.sub(r':([\w_\-+]+):', repl, text)
        if new_text != text:
            cursor = self.message_input.textCursor()
            pos = cursor.position()
            self.message_input.blockSignals(True)
            self.message_input.setPlainText(new_text)
            self.message_input.blockSignals(False)
            cursor.setPosition(pos)
            self.message_input.setTextCursor(cursor)

    def add_reaction_button(self, msg_index):
        btn = QPushButton("üòä")
        btn.setToolTip("Th√™m reaction cho tin nh·∫Øn n√†y")
        def choose_reaction():
            from PyQt6.QtWidgets import QDialog, QHBoxLayout, QPushButton
            dialog = QDialog(self)
            dialog.setWindowTitle("Ch·ªçn reaction")
            layout = QHBoxLayout()
            reactions = ["‚ù§", "üòÜ", "üò¢", "üëç", "üëé"]
            for r in reactions:
                rbtn = QPushButton(r)
                rbtn.setFixedSize(36, 36)
                rbtn.clicked.connect(lambda checked, rx=r: self.set_reaction(msg_index, rx, dialog))
                layout.addWidget(rbtn)
            dialog.setLayout(layout)
            dialog.exec()
        btn.clicked.connect(choose_reaction)
        item = QListWidgetItem()
        w = QWidget()
        l = QHBoxLayout(w)
        l.addStretch()
        l.addWidget(btn)
        item.setSizeHint(w.sizeHint())
        self.chat_list.addItem(item)
        self.chat_list.setItemWidget(item, w)

    def set_reaction(self, msg_index, reaction, dialog):
        if msg_index is None:
            return
        if not os.path.exists(self.messages_file):
            return
        with open(self.messages_file, "r", encoding="utf-8") as f:
            messages = json.load(f)
        if 0 <= msg_index < len(messages):
            messages[msg_index]["reaction"] = reaction
            with open(self.messages_file, "w", encoding="utf-8") as f:
                json.dump(messages, f, indent=4, ensure_ascii=False)
        dialog.accept()
        self.chat_list.clear()
        self.load_messages()

    def get_reaction(self, msg_index):
        if msg_index is None:
            return ""
        if not os.path.exists(self.messages_file):
            return ""
        with open(self.messages_file, "r", encoding="utf-8") as f:
            messages = json.load(f)
        if 0 <= msg_index < len(messages):
            return messages[msg_index].get("reaction", "")
        return ""

    def load_user_data(self, username):
        """Load user data from JSON file"""
        path = f"data/users/{username}.json"
        if os.path.exists(path):
            with open(path, "r", encoding="utf-8") as f:
                return json.load(f)
        return {}


class GroupChatWindow(QDialog):
    def __init__(self, group_id, current_user):
        super().__init__()
        self.group_id = group_id
        self.current_user = current_user
        self.setWindowTitle(f"Nh√≥m: {self.get_group_name()}")
        self.setGeometry(200, 200, 600, 600)
        self.messages_file = f"data/messages/group_{group_id}.json"
        self.init_ui()
        self.load_messages()

    def get_group_name(self):
        if not os.path.exists("data/groups.json"):
            return self.group_id
        with open("data/groups.json", "r", encoding="utf-8") as f:
            groups = json.load(f)
        for g in groups:
            if g["id"] == self.group_id:
                return g["name"]
        return self.group_id

    def get_members(self):
        if not os.path.exists("data/groups.json"):
            return []
        with open("data/groups.json", "r", encoding="utf-8") as f:
            groups = json.load(f)
        for g in groups:
            if g["id"] == self.group_id:
                return g["members"]
        return []

    def init_ui(self):
        layout = QVBoxLayout()
        self.chat_list = QListWidget()
        layout.addWidget(self.chat_list)
        self.message_input = QTextEdit()
        self.message_input.setPlaceholderText("Nh·∫≠p tin nh·∫Øn...")
        self.message_input.setFixedHeight(80)
        send_btn = QPushButton("G·ª≠i")
        send_btn.clicked.connect(self.send_message)
        layout.addWidget(self.message_input)
        layout.addWidget(send_btn)
        # Hi·ªÉn th·ªã th√†nh vi√™n
        members = ", ".join(self.get_members())
        layout.addWidget(QLabel(f"Th√†nh vi√™n: {members}"))
        self.setLayout(layout)

    def load_messages(self):
        self.chat_list.clear()
        if os.path.exists(self.messages_file):
            with open(self.messages_file, "r", encoding="utf-8") as f:
                messages = json.load(f)
                for msg in messages:
                    item = QListWidgetItem(f"{msg['sender']}: {msg['content']}")
                    self.chat_list.addItem(item)

    def send_message(self):
        content = self.message_input.toPlainText().strip()
        if not content:
            return
        messages = []
        if os.path.exists(self.messages_file):
            with open(self.messages_file, "r", encoding="utf-8") as f:
                messages = json.load(f)
        timestamp = QDateTime.currentDateTime().toString("yyyy-MM-dd hh:mm:ss")
        messages.append({
            "sender": self.current_user,
            "content": content,
            "timestamp": timestamp
        })
        with open(self.messages_file, "w", encoding="utf-8") as f:
            json.dump(messages, f, indent=4, ensure_ascii=False)
        self.message_input.clear()
        self.load_messages()
